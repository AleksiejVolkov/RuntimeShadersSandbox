//necessary for the shader to work:
uniform float2 resolution; // Viewport resolution (px)
uniform shader image;
uniform float time;

//custom uniforms:
uniform float3 color;
uniform float thickness;
uniform float radius;
//end custom uniforms

//helper functions:
vec2 normalizeUv(float2 fragCoord) {
    vec2 uv = fragCoord/resolution.xy - .5;
    return vec2(uv.x * resolution.x/resolution.y, uv.y);
}

half4 mergeImageAndShader(float2 fragCoord, vec4 col, vec4 background) {
    return half4(mix(background.rgb, col.rgb, col.a),col.a);
}
//end of helper functions

float getCircle(vec2 uv, float radius) {
    return smoothstep(radius,radius-0.003,length(uv));
}

float getStroke(vec2 uv, float radius, float width) {
    return getCircle(uv, radius)-getCircle(uv,radius*width);
}

float circleSdf(vec2 samplePosition, float radius){
    return smoothstep(radius, 0., length(samplePosition));
}

half4 main(float2 fragCoord) {
    vec2 uv = normalizeUv(fragCoord); // get normalized uv coordinates

    vec3 circleColor = color;
    float ringRadius = 0.14+radius*0.25;

    vec3 rgb = circleColor.rgb;
    float stroke = getStroke(uv,ringRadius,1.-(0.2*thickness));
    float outer = circleSdf(uv, ringRadius+ringRadius*abs(sin(time*0.01)));
    float ring = (outer*(1.-getStroke(uv,ringRadius,0.)) + stroke);

    vec4 tex = vec4(image.eval(fragCoord));
    vec4 col = vec4(circleColor, ring);

    return mergeImageAndShader(fragCoord, col, vec4(image.eval(fragCoord)));
}