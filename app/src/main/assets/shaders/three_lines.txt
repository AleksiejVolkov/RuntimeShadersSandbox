//necessary for the shader to work:
uniform float2 resolution;
uniform shader image;
uniform float time;

//custom uniforms:
uniform float3 color_0;
uniform float3 color_1;
uniform float3 color_2;
uniform float thickness;
uniform float radius;
//end of custom uniforms

//helper functions:
vec2 normalizeUv(float2 fragCoord) {
    vec2 uv = fragCoord/resolution.xy - .5;
    return vec2(uv.x * resolution.x/resolution.y, uv.y);
}

half4 mergeImageAndShader(float2 fragCoord, vec4 col, vec4 background) {
    return half4(mix(background.rgb, col.rgb, col.a),col.a);
}
//end of helper functions

//beginning your of shader code:
float getCircle(vec2 uv,
                float radius,
                float waveStrength,
                float waveOffset) {
    float angle = atan(uv.y, uv.x);
    float wavyRadius = radius + sin(angle*3.+waveOffset) *waveStrength;
    return smoothstep(wavyRadius,wavyRadius-0.003,length(uv));
}

float getStroke(vec2 uv, float radius, float width, float waveStrength, float waveOffset) {
    return getCircle(uv, radius, waveStrength, waveOffset)
            - getCircle(uv, radius*width, waveStrength, waveOffset);
}

//shader entry point:
half4 main(float2 fragCoord) {
    vec2 uv = normalizeUv(fragCoord); // get normalized uv coordinates

    float scaledTime = -time*0.02;
    float ringRadius = (0.2+radius*0.1) + sin(scaledTime)*0.01;
    float edge = 0.01;

    float circle = getStroke(uv,ringRadius,0.95 - thickness*0.1,0.055*(radius*0.1),scaledTime);
    float circle2 = getStroke(uv,ringRadius,0.95 - thickness*0.1,0.05*(radius*0.1),scaledTime*3);
    float circle3 = getStroke(uv,ringRadius,0.95 - thickness*0.1,0.055*(radius*0.1),scaledTime*5);

    float mask = clamp(0.,1., circle3+circle2+circle);
    vec4 col = vec4(color_0.rgb*circle+color_1.rgb*circle2+color_2.rgb*circle3,mask);

    return mergeImageAndShader(fragCoord, col, vec4(image.eval(fragCoord))); // return the final color
}