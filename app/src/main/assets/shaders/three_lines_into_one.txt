//necessary for the shader to work:
uniform float2 resolution; // Viewport resolution (px)
uniform shader image;
uniform float time;

//custom uniforms:
uniform float3 color_0;
uniform float3 color_1;
uniform float3 color_2;
uniform float thickness;
uniform float radius;
uniform float waveWidth;
//end custom uniforms

//helper functions:
vec2 normalizeUv(float2 fragCoord) {
    vec2 uv = fragCoord/resolution.xy - .5;
    return vec2(uv.x * resolution.x/resolution.y, uv.y);
}

half4 mergeImageAndShader(float2 fragCoord, vec4 col, vec4 background) {
    return half4(mix(background.rgb, col.rgb, col.a),col.a);
}
//end of helper functions

mat2 rotationMatrix(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat2(c, -s, s, c);
}

float getCircle(vec2 uv, float radius, float waveStrength, float waveOffset) {
      float angle = atan(uv.y, uv.x);
    float x = .2;
    float rotation = pow(sin(angle-time*0.02) / 2.0 + 0.5,(6. - 6.*(waveWidth*waveWidth)));
    float wavyRadius = radius + sin(angle*(15.)+waveOffset)*waveStrength*rotation;
    return smoothstep(wavyRadius, wavyRadius-0.005, length(uv));
}

float getStroke(vec2 uv, float radius, float width, float waveStrength, float waveOffset) {
    return getCircle(uv, radius, waveStrength,waveOffset)-getCircle(uv,radius*width,waveStrength,waveOffset);
}

float circleSdf(vec2 samplePosition, float radius){
    return smoothstep(radius, 0., length(samplePosition));
}

half4 main(float2 fragCoord) {
    vec2 uv = normalizeUv(fragCoord); // get normalized uv coordinates

    float scaledTime = -time*0.02;
    float ringRadius = 0.15 + radius*0.1;           // Circle radius
    float edge = 0.01;            // Edge softness

    float circle = getStroke(uv,ringRadius,0.99-thickness*0.05,0.08*ringRadius,scaledTime);
    float circle2 = getStroke(uv,ringRadius,0.99-thickness*0.05,0.08*ringRadius,scaledTime+2.);
    float circle3 = getStroke(uv,ringRadius,0.99-thickness*0.05,0.08*ringRadius,scaledTime+4.);

    vec3 rgb = color_0.rgb*circle+color_1.rgb*circle2+color_2.rgb*circle3;
    float mask = circle+circle2+circle3;

    vec4 col = vec4(rgb, mask);

    return mergeImageAndShader(fragCoord, col, vec4(image.eval(fragCoord))); // return the final color
}